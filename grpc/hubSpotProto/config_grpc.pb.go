// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: config.proto

package hubspot_integration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubSpotClient is the client API for HubSpot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubSpotClient interface {
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetPartner(ctx context.Context, in *PartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error)
}

type hubSpotClient struct {
	cc grpc.ClientConnInterface
}

func NewHubSpotClient(cc grpc.ClientConnInterface) HubSpotClient {
	return &hubSpotClient{cc}
}

func (c *hubSpotClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/hubspot_integration.HubSpot/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubSpotClient) GetPartner(ctx context.Context, in *PartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error) {
	out := new(PartnerResponse)
	err := c.cc.Invoke(ctx, "/hubspot_integration.HubSpot/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubSpotServer is the server API for HubSpot service.
// All implementations should embed UnimplementedHubSpotServer
// for forward compatibility
type HubSpotServer interface {
	GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	GetPartner(context.Context, *PartnerRequest) (*PartnerResponse, error)
}

// UnimplementedHubSpotServer should be embedded to have forward compatible implementations.
type UnimplementedHubSpotServer struct {
}

func (UnimplementedHubSpotServer) GetConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedHubSpotServer) GetPartner(context.Context, *PartnerRequest) (*PartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}

// UnsafeHubSpotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubSpotServer will
// result in compilation errors.
type UnsafeHubSpotServer interface {
	mustEmbedUnimplementedHubSpotServer()
}

func RegisterHubSpotServer(s grpc.ServiceRegistrar, srv HubSpotServer) {
	s.RegisterService(&HubSpot_ServiceDesc, srv)
}

func _HubSpot_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubSpotServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubspot_integration.HubSpot/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubSpotServer).GetConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubSpot_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubSpotServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hubspot_integration.HubSpot/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubSpotServer).GetPartner(ctx, req.(*PartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HubSpot_ServiceDesc is the grpc.ServiceDesc for HubSpot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubSpot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hubspot_integration.HubSpot",
	HandlerType: (*HubSpotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _HubSpot_GetConfig_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _HubSpot_GetPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
